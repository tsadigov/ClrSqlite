using System.Diagnostics;
using System;

namespace Community.CsharpSqlite
{
	public partial class Sqlite3
	{
		///
///<summary>
///This file contains automatically generated code ******
///
///The code in this file has been automatically generated by
///
///sqlite/tool/mkkeywordhash.c
///
///The code in this file implements a function that determines whether
///or not a given identifier is really an SQL keyword.  The same thing
///</summary>
///<param name="might be implemented more directly using a hand">written hash table.</param>
///<param name="But by using this automatically generated code, the size of the code">But by using this automatically generated code, the size of the code</param>
///<param name="is substantially reduced.  This is important for embedded applications">is substantially reduced.  This is important for embedded applications</param>
///<param name="on platforms with limited memory.">on platforms with limited memory.</param>
///<param name=""></param>
///<param name="Included in SQLite3 port to C#">SQLite;  2008 Noah B Hart</param>
///<param name="C#">SQLite is an independent reimplementation of the SQLite software library</param>
///<param name=""></param>
///<param name="SQLITE_SOURCE_ID: 2010">23 18:52:01 42537b60566f288167f1b5864a5435986838e3a3</param>
///<param name=""></param>
///<param name=""></param>
///<param name=""></param>

		///
///<summary>
///Hash score: 175 
///</summary>

		///
///<summary>
///zText[] encodes 811 bytes of keywords in 541 bytes 
///</summary>

		///
///<summary>
///REINDEXEDESCAPEACHECKEYBEFOREIGNOREGEXPLAINSTEADDATABASELECT       
///</summary>

		///
///<summary>
///ABLEFTHENDEFERRABLELSEXCEPTRANSACTIONATURALTERAISEXCLUSIVE         
///</summary>

		///
///<summary>
///XISTSAVEPOINTERSECTRIGGEREFERENCESCONSTRAINTOFFSETEMPORARY         
///</summary>

		///
///<summary>
///UNIQUERYATTACHAVINGROUPDATEBEGINNERELEASEBETWEENOTNULLIKE          
///</summary>

		///
///<summary>
///CASCADELETECASECOLLATECREATECURRENT_DATEDETACHIMMEDIATEJOIN        
///</summary>

		///
///<summary>
///SERTMATCHPLANALYZEPRAGMABORTVALUESVIRTUALIMITWHENWHERENAME         
///</summary>

		///
///<summary>
///AFTEREPLACEANDEFAULTAUTOINCREMENTCASTCOLUMNCOMMITCONFLICTCROSS     
///</summary>

		///
///<summary>
///CURRENT_TIMESTAMPRIMARYDEFERREDISTINCTDROPFAILFROMFULLGLOBYIF      
///</summary>

		///
///<summary>
///ISNULLORDERESTRICTOUTERIGHTROLLBACKROWUNIONUSINGVACUUMVIEW         
///</summary>

		///<summary>
		///INITIALLY
		///</summary>
		static string zText = new string (new char[540] {
			'R',
			'E',
			'I',
			'N',
			'D',
			'E',
			'X',
			'E',
			'D',
			'E',
			'S',
			'C',
			'A',
			'P',
			'E',
			'A',
			'C',
			'H',
			'E',
			'C',
			'K',
			'E',
			'Y',
			'B',
			'E',
			'F',
			'O',
			'R',
			'E',
			'I',
			'G',
			'N',
			'O',
			'R',
			'E',
			'G',
			'E',
			'X',
			'P',
			'L',
			'A',
			'I',
			'N',
			'S',
			'T',
			'E',
			'A',
			'D',
			'D',
			'A',
			'T',
			'A',
			'B',
			'A',
			'S',
			'E',
			'L',
			'E',
			'C',
			'T',
			'A',
			'B',
			'L',
			'E',
			'F',
			'T',
			'H',
			'E',
			'N',
			'D',
			'E',
			'F',
			'E',
			'R',
			'R',
			'A',
			'B',
			'L',
			'E',
			'L',
			'S',
			'E',
			'X',
			'C',
			'E',
			'P',
			'T',
			'R',
			'A',
			'N',
			'S',
			'A',
			'C',
			'T',
			'I',
			'O',
			'N',
			'A',
			'T',
			'U',
			'R',
			'A',
			'L',
			'T',
			'E',
			'R',
			'A',
			'I',
			'S',
			'E',
			'X',
			'C',
			'L',
			'U',
			'S',
			'I',
			'V',
			'E',
			'X',
			'I',
			'S',
			'T',
			'S',
			'A',
			'V',
			'E',
			'P',
			'O',
			'I',
			'N',
			'T',
			'E',
			'R',
			'S',
			'E',
			'C',
			'T',
			'R',
			'I',
			'G',
			'G',
			#if !SQLITE_OMIT_TRIGGER
			'E',
			#else
																																																									'\0',
#endif
			'R',
			#if !SQLITE_OMIT_FOREIGN_KEY
			'E',
			#else
																																																									'\0',
#endif
			'F',
			'E',
			'R',
			'E',
			'N',
			'C',
			'E',
			'S',
			'C',
			'O',
			'N',
			'S',
			'T',
			'R',
			'A',
			'I',
			'N',
			'T',
			'O',
			'F',
			'F',
			'S',
			'E',
			'T',
			'E',
			'M',
			'P',
			'O',
			'R',
			'A',
			'R',
			'Y',
			'U',
			'N',
			'I',
			'Q',
			'U',
			'E',
			'R',
			'Y',
			'A',
			'T',
			'T',
			'A',
			'C',
			'H',
			'A',
			'V',
			'I',
			'N',
			'G',
			'R',
			'O',
			'U',
			'P',
			'D',
			'A',
			'T',
			'E',
			'B',
			'E',
			'G',
			'I',
			'N',
			'N',
			'E',
			'R',
			'E',
			'L',
			'E',
			'A',
			'S',
			'E',
			'B',
			'E',
			'T',
			'W',
			'E',
			'E',
			'N',
			'O',
			'T',
			'N',
			'U',
			'L',
			'L',
			'I',
			'K',
			'E',
			'C',
			'A',
			'S',
			'C',
			'A',
			'D',
			'E',
			'L',
			'E',
			'T',
			'E',
			'C',
			'A',
			'S',
			'E',
			'C',
			'O',
			'L',
			'L',
			'A',
			'T',
			'E',
			'C',
			'R',
			'E',
			'A',
			'T',
			'E',
			'C',
			'U',
			'R',
			'R',
			'E',
			'N',
			'T',
			'_',
			'D',
			'A',
			'T',
			'E',
			'D',
			'E',
			'T',
			'A',
			'C',
			'H',
			'I',
			'M',
			'M',
			'E',
			'D',
			'I',
			'A',
			'T',
			'E',
			'J',
			'O',
			'I',
			'N',
			'S',
			'E',
			'R',
			'T',
			'M',
			'A',
			'T',
			'C',
			'H',
			'P',
			'L',
			'A',
			'N',
			'A',
			'L',
			'Y',
			'Z',
			'E',
			'P',
			'R',
			'A',
			'G',
			'M',
			'A',
			'B',
			'O',
			'R',
			'T',
			'V',
			'A',
			'L',
			'U',
			'E',
			'S',
			'V',
			'I',
			'R',
			'T',
			'U',
			'A',
			'L',
			'I',
			'M',
			'I',
			'T',
			'W',
			'H',
			'E',
			'N',
			'W',
			'H',
			'E',
			'R',
			'E',
			'N',
			'A',
			'M',
			'E',
			'A',
			'F',
			'T',
			'E',
			'R',
			'E',
			'P',
			'L',
			'A',
			'C',
			'E',
			'A',
			'N',
			'D',
			'E',
			'F',
			'A',
			'U',
			'L',
			'T',
			'A',
			'U',
			'T',
			'O',
			'I',
			'N',
			'C',
			'R',
			'E',
			'M',
			'E',
			'N',
			'T',
			'C',
			'A',
			'S',
			'T',
			'C',
			'O',
			'L',
			'U',
			'M',
			'N',
			'C',
			'O',
			'M',
			'M',
			'I',
			'T',
			'C',
			'O',
			'N',
			'F',
			'L',
			'I',
			'C',
			'T',
			'C',
			'R',
			'O',
			'S',
			'S',
			'C',
			'U',
			'R',
			'R',
			'E',
			'N',
			'T',
			'_',
			'T',
			'I',
			'M',
			'E',
			'S',
			'T',
			'A',
			'M',
			'P',
			'R',
			'I',
			'M',
			'A',
			'R',
			'Y',
			'D',
			'E',
			'F',
			'E',
			'R',
			'R',
			'E',
			'D',
			'I',
			'S',
			'T',
			'I',
			'N',
			'C',
			'T',
			'D',
			'R',
			'O',
			'P',
			'F',
			'A',
			'I',
			'L',
			'F',
			'R',
			'O',
			'M',
			'F',
			'U',
			'L',
			'L',
			'G',
			'L',
			'O',
			'B',
			'Y',
			'I',
			'F',
			'I',
			'S',
			'N',
			'U',
			'L',
			'L',
			'O',
			'R',
			'D',
			'E',
			'R',
			'E',
			'S',
			'T',
			'R',
			'I',
			'C',
			'T',
			'O',
			'U',
			'T',
			'E',
			'R',
			'I',
			'G',
			'H',
			'T',
			'R',
			'O',
			'L',
			'L',
			'B',
			'A',
			'C',
			'K',
			'R',
			'O',
			'W',
			'U',
			'N',
			'I',
			'O',
			'N',
			'U',
			'S',
			'I',
			'N',
			'G',
			'V',
			'A',
			'C',
			'U',
			'U',
			'M',
			'V',
			'I',
			'E',
			'W',
			'I',
			'N',
			'I',
			'T',
			'I',
			'A',
			'L',
			'L',
			'Y',
		});

		static byte[] aHash =  {
			//aHash[127]
			72,
			101,
			114,
			70,
			0,
			45,
			0,
			0,
			78,
			0,
			73,
			0,
			0,
			42,
			12,
			74,
			15,
			0,
			113,
			81,
			50,
			108,
			0,
			19,
			0,
			0,
			118,
			0,
			116,
			111,
			0,
			22,
			89,
			0,
			9,
			0,
			0,
			66,
			67,
			0,
			65,
			6,
			0,
			48,
			86,
			98,
			0,
			115,
			97,
			0,
			0,
			44,
			0,
			99,
			24,
			0,
			17,
			0,
			119,
			49,
			23,
			0,
			5,
			106,
			25,
			92,
			0,
			0,
			121,
			102,
			56,
			120,
			53,
			28,
			51,
			0,
			87,
			0,
			96,
			26,
			0,
			95,
			0,
			0,
			0,
			91,
			88,
			93,
			84,
			105,
			14,
			39,
			104,
			0,
			77,
			0,
			18,
			85,
			107,
			32,
			0,
			117,
			76,
			109,
			58,
			46,
			80,
			0,
			0,
			90,
			40,
			0,
			112,
			0,
			36,
			0,
			0,
			29,
			0,
			82,
			59,
			60,
			0,
			20,
			57,
			0,
			52,
		};

		static byte[] aNext =  {
			//aNext[121]
			0,
			0,
			0,
			0,
			4,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			2,
			0,
			0,
			0,
			0,
			0,
			0,
			13,
			0,
			0,
			0,
			0,
			0,
			7,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			33,
			0,
			21,
			0,
			0,
			0,
			43,
			3,
			47,
			0,
			0,
			0,
			0,
			30,
			0,
			54,
			0,
			38,
			0,
			0,
			0,
			1,
			62,
			0,
			0,
			63,
			0,
			41,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			61,
			0,
			0,
			0,
			0,
			31,
			55,
			16,
			34,
			10,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			11,
			68,
			75,
			0,
			8,
			0,
			100,
			94,
			0,
			103,
			0,
			83,
			0,
			71,
			0,
			0,
			110,
			27,
			37,
			69,
			79,
			0,
			35,
			64,
			0,
			0,
		};

		static byte[] aLen =  {
			//aLen[121]
			7,
			7,
			5,
			4,
			6,
			4,
			5,
			3,
			6,
			7,
			3,
			6,
			6,
			7,
			7,
			3,
			8,
			2,
			6,
			5,
			4,
			4,
			3,
			10,
			4,
			6,
			11,
			6,
			2,
			7,
			5,
			5,
			9,
			6,
			9,
			9,
			7,
			10,
			10,
			4,
			6,
			2,
			3,
			9,
			4,
			2,
			6,
			5,
			6,
			6,
			5,
			6,
			5,
			5,
			7,
			7,
			7,
			3,
			2,
			4,
			4,
			7,
			3,
			6,
			4,
			7,
			6,
			12,
			6,
			9,
			4,
			6,
			5,
			4,
			7,
			6,
			5,
			6,
			7,
			5,
			4,
			5,
			6,
			5,
			7,
			3,
			7,
			13,
			2,
			2,
			4,
			6,
			6,
			8,
			5,
			17,
			12,
			7,
			8,
			8,
			2,
			4,
			4,
			4,
			4,
			4,
			2,
			2,
			6,
			5,
			8,
			5,
			5,
			8,
			3,
			5,
			5,
			6,
			4,
			9,
			3,
		};

		static int[] aOffset =  {
			//aOffset[121]
			0,
			2,
			2,
			8,
			9,
			14,
			16,
			20,
			23,
			25,
			25,
			29,
			33,
			36,
			41,
			46,
			48,
			53,
			54,
			59,
			62,
			65,
			67,
			69,
			78,
			81,
			86,
			91,
			95,
			96,
			101,
			105,
			109,
			117,
			122,
			128,
			136,
			142,
			152,
			159,
			162,
			162,
			165,
			167,
			167,
			171,
			176,
			179,
			184,
			189,
			194,
			197,
			203,
			206,
			210,
			217,
			223,
			223,
			223,
			226,
			229,
			233,
			234,
			238,
			244,
			248,
			255,
			261,
			273,
			279,
			288,
			290,
			296,
			301,
			303,
			310,
			315,
			320,
			326,
			332,
			337,
			341,
			344,
			350,
			354,
			361,
			363,
			370,
			372,
			374,
			383,
			387,
			393,
			399,
			407,
			412,
			412,
			428,
			435,
			442,
			443,
			450,
			454,
			458,
			462,
			466,
			469,
			471,
			473,
			479,
			483,
			491,
			495,
			500,
			508,
			511,
			516,
			521,
			527,
			531,
			536,
		};

		static byte[] aCode =  {
			//aCode[121
			TK_REINDEX,
			TK_INDEXED,
			TK_INDEX,
			TK_DESC,
			TK_ESCAPE,
			TK_EACH,
			TK_CHECK,
			TK_KEY,
			TK_BEFORE,
			TK_FOREIGN,
			TK_FOR,
			TK_IGNORE,
			TK_LIKE_KW,
			TK_EXPLAIN,
			TK_INSTEAD,
			TK_ADD,
			TK_DATABASE,
			TK_AS,
			TK_SELECT,
			TK_TABLE,
			TK_JOIN_KW,
			TK_THEN,
			TK_END,
			TK_DEFERRABLE,
			TK_ELSE,
			TK_EXCEPT,
			TK_TRANSACTION,
			TK_ACTION,
			TK_ON,
			TK_JOIN_KW,
			TK_ALTER,
			TK_RAISE,
			TK_EXCLUSIVE,
			TK_EXISTS,
			TK_SAVEPOINT,
			TK_INTERSECT,
			TK_TRIGGER,
			TK_REFERENCES,
			TK_CONSTRAINT,
			TK_INTO,
			TK_OFFSET,
			TK_OF,
			TK_SET,
			TK_TEMP,
			TK_TEMP,
			TK_OR,
			TK_UNIQUE,
			TK_QUERY,
			TK_ATTACH,
			TK_HAVING,
			TK_GROUP,
			TK_UPDATE,
			TK_BEGIN,
			TK_JOIN_KW,
			TK_RELEASE,
			TK_BETWEEN,
			TK_NOTNULL,
			TK_NOT,
			TK_NO,
			TK_NULL,
			TK_LIKE_KW,
			TK_CASCADE,
			TK_ASC,
			TK_DELETE,
			TK_CASE,
			TK_COLLATE,
			TK_CREATE,
			TK_CTIME_KW,
			TK_DETACH,
			TK_IMMEDIATE,
			TK_JOIN,
			TK_INSERT,
			TK_MATCH,
			TK_PLAN,
			TK_ANALYZE,
			TK_PRAGMA,
			TK_ABORT,
			TK_VALUES,
			TK_VIRTUAL,
			TK_LIMIT,
			TK_WHEN,
			TK_WHERE,
			TK_RENAME,
			TK_AFTER,
			TK_REPLACE,
			TK_AND,
			TK_DEFAULT,
			TK_AUTOINCR,
			TK_TO,
			TK_IN,
			TK_CAST,
			TK_COLUMNKW,
			TK_COMMIT,
			TK_CONFLICT,
			TK_JOIN_KW,
			TK_CTIME_KW,
			TK_CTIME_KW,
			TK_PRIMARY,
			TK_DEFERRED,
			TK_DISTINCT,
			TK_IS,
			TK_DROP,
			TK_FAIL,
			TK_FROM,
			TK_JOIN_KW,
			TK_LIKE_KW,
			TK_BY,
			TK_IF,
			TK_ISNULL,
			TK_ORDER,
			TK_RESTRICT,
			TK_JOIN_KW,
			TK_JOIN_KW,
			TK_ROLLBACK,
			TK_ROW,
			TK_UNION,
			TK_USING,
			TK_VACUUM,
			TK_VIEW,
			TK_INITIALLY,
			TK_ALL,
		};

		static TokenType keywordCode (string z, int iOffset, int n)
		{
			return (TokenType)innerKeywordCode (z, iOffset, n);
		}

		static int innerKeywordCode (string z, int iOffset, int n)
		{
			int h, i;
			if (n < 2)
				return TK_ID;
			h = ((sqlite3UpperToLower [z [iOffset + 0]]) * 4 ^ //(charMap(z[iOffset+0]) * 4) ^
			(sqlite3UpperToLower [z [iOffset + n - 1]] * 3) ^ //(charMap(z[iOffset+n - 1]) * 3) ^
			n) % 127;
			for (i = (aHash [h]) - 1; i >= 0; i = (aNext [i]) - 1) {
				if (aLen [i] == n && String.Compare (zText, aOffset [i], z, iOffset, n, StringComparison.InvariantCultureIgnoreCase) == 0) {
					testcase (i == 0);
					///
///<summary>
///REINDEX 
///</summary>

					testcase (i == 1);
					///
///<summary>
///INDEXED 
///</summary>

					testcase (i == 2);
					///
///<summary>
///INDEX 
///</summary>

					testcase (i == 3);
					///
///<summary>
///DESC 
///</summary>

					testcase (i == 4);
					///
///<summary>
///ESCAPE 
///</summary>

					testcase (i == 5);
					///
///<summary>
///EACH 
///</summary>

					testcase (i == 6);
					///
///<summary>
///CHECK 
///</summary>

					testcase (i == 7);
					///
///<summary>
///KEY 
///</summary>

					testcase (i == 8);
					///
///<summary>
///BEFORE 
///</summary>

					testcase (i == 9);
					///
///<summary>
///FOREIGN 
///</summary>

					testcase (i == 10);
					///
///<summary>
///FOR 
///</summary>

					testcase (i == 11);
					///
///<summary>
///IGNORE 
///</summary>

					testcase (i == 12);
					///
///<summary>
///REGEXP 
///</summary>

					testcase (i == 13);
					///
///<summary>
///EXPLAIN 
///</summary>

					testcase (i == 14);
					///
///<summary>
///INSTEAD 
///</summary>

					testcase (i == 15);
					///
///<summary>
///ADD 
///</summary>

					testcase (i == 16);
					///
///<summary>
///DATABASE 
///</summary>

					testcase (i == 17);
					///
///<summary>
///AS 
///</summary>

					testcase (i == 18);
					///
///<summary>
///SELECT 
///</summary>

					testcase (i == 19);
					///
///<summary>
///TABLE 
///</summary>

					testcase (i == 20);
					///
///<summary>
///LEFT 
///</summary>

					testcase (i == 21);
					///
///<summary>
///THEN 
///</summary>

					testcase (i == 22);
					///
///<summary>
///END 
///</summary>

					testcase (i == 23);
					///
///<summary>
///DEFERRABLE 
///</summary>

					testcase (i == 24);
					///
///<summary>
///ELSE 
///</summary>

					testcase (i == 25);
					///
///<summary>
///EXCEPT 
///</summary>

					testcase (i == 26);
					///
///<summary>
///TRANSACTION 
///</summary>

					testcase (i == 27);
					///
///<summary>
///ACTION 
///</summary>

					testcase (i == 28);
					///
///<summary>
///ON 
///</summary>

					testcase (i == 29);
					///
///<summary>
///NATURAL 
///</summary>

					testcase (i == 30);
					///
///<summary>
///ALTER 
///</summary>

					testcase (i == 31);
					///
///<summary>
///RAISE 
///</summary>

					testcase (i == 32);
					///
///<summary>
///EXCLUSIVE 
///</summary>

					testcase (i == 33);
					///
///<summary>
///EXISTS 
///</summary>

					testcase (i == 34);
					///
///<summary>
///SAVEPOINT 
///</summary>

					testcase (i == 35);
					///
///<summary>
///INTERSECT 
///</summary>

					testcase (i == 36);
					///
///<summary>
///TRIGGER 
///</summary>

					testcase (i == 37);
					///
///<summary>
///REFERENCES 
///</summary>

					testcase (i == 38);
					///
///<summary>
///CONSTRAINT 
///</summary>

					testcase (i == 39);
					///
///<summary>
///INTO 
///</summary>

					testcase (i == 40);
					///
///<summary>
///OFFSET 
///</summary>

					testcase (i == 41);
					///
///<summary>
///OF 
///</summary>

					testcase (i == 42);
					///
///<summary>
///SET 
///</summary>

					testcase (i == 43);
					///
///<summary>
///TEMPORARY 
///</summary>

					testcase (i == 44);
					///
///<summary>
///TEMP 
///</summary>

					testcase (i == 45);
					///
///<summary>
///OR 
///</summary>

					testcase (i == 46);
					///
///<summary>
///UNIQUE 
///</summary>

					testcase (i == 47);
					///
///<summary>
///QUERY 
///</summary>

					testcase (i == 48);
					///
///<summary>
///ATTACH 
///</summary>

					testcase (i == 49);
					///
///<summary>
///HAVING 
///</summary>

					testcase (i == 50);
					///
///<summary>
///GROUP 
///</summary>

					testcase (i == 51);
					///
///<summary>
///UPDATE 
///</summary>

					testcase (i == 52);
					///
///<summary>
///BEGIN 
///</summary>

					testcase (i == 53);
					///
///<summary>
///INNER 
///</summary>

					testcase (i == 54);
					///
///<summary>
///RELEASE 
///</summary>

					testcase (i == 55);
					///
///<summary>
///BETWEEN 
///</summary>

					testcase (i == 56);
					///
///<summary>
///NOTNULL 
///</summary>

					testcase (i == 57);
					///
///<summary>
///NOT 
///</summary>

					testcase (i == 58);
					///
///<summary>
///NO 
///</summary>

					testcase (i == 59);
					///
///<summary>
///NULL 
///</summary>

					testcase (i == 60);
					///
///<summary>
///LIKE 
///</summary>

					testcase (i == 61);
					///
///<summary>
///CASCADE 
///</summary>

					testcase (i == 62);
					///
///<summary>
///ASC 
///</summary>

					testcase (i == 63);
					///
///<summary>
///DELETE 
///</summary>

					testcase (i == 64);
					///
///<summary>
///CASE 
///</summary>

					testcase (i == 65);
					///
///<summary>
///COLLATE 
///</summary>

					testcase (i == 66);
					///
///<summary>
///CREATE 
///</summary>

					testcase (i == 67);
					///
///<summary>
///CURRENT_DATE 
///</summary>

					testcase (i == 68);
					///
///<summary>
///DETACH 
///</summary>

					testcase (i == 69);
					///
///<summary>
///IMMEDIATE 
///</summary>

					testcase (i == 70);
					///
///<summary>
///JOIN 
///</summary>

					testcase (i == 71);
					///
///<summary>
///INSERT 
///</summary>

					testcase (i == 72);
					///
///<summary>
///MATCH 
///</summary>

					testcase (i == 73);
					///
///<summary>
///PLAN 
///</summary>

					testcase (i == 74);
					///
///<summary>
///ANALYZE 
///</summary>

					testcase (i == 75);
					///
///<summary>
///PRAGMA 
///</summary>

					testcase (i == 76);
					///
///<summary>
///ABORT 
///</summary>

					testcase (i == 77);
					///
///<summary>
///VALUES 
///</summary>

					testcase (i == 78);
					///
///<summary>
///VIRTUAL 
///</summary>

					testcase (i == 79);
					///
///<summary>
///LIMIT 
///</summary>

					testcase (i == 80);
					///
///<summary>
///WHEN 
///</summary>

					testcase (i == 81);
					///
///<summary>
///WHERE 
///</summary>

					testcase (i == 82);
					///
///<summary>
///RENAME 
///</summary>

					testcase (i == 83);
					///
///<summary>
///AFTER 
///</summary>

					testcase (i == 84);
					///
///<summary>
///REPLACE 
///</summary>

					testcase (i == 85);
					///
///<summary>
///AND 
///</summary>

					testcase (i == 86);
					///
///<summary>
///DEFAULT 
///</summary>

					testcase (i == 87);
					///
///<summary>
///AUTOINCREMENT 
///</summary>

					testcase (i == 88);
					///
///<summary>
///TO 
///</summary>

					testcase (i == 89);
					///
///<summary>
///IN 
///</summary>

					testcase (i == 90);
					///
///<summary>
///CAST 
///</summary>

					testcase (i == 91);
					///
///<summary>
///COLUMN 
///</summary>

					testcase (i == 92);
					///
///<summary>
///COMMIT 
///</summary>

					testcase (i == 93);
					///
///<summary>
///CONFLICT 
///</summary>

					testcase (i == 94);
					///
///<summary>
///CROSS 
///</summary>

					testcase (i == 95);
					///
///<summary>
///CURRENT_TIMESTAMP 
///</summary>

					testcase (i == 96);
					///
///<summary>
///CURRENT_TIME 
///</summary>

					testcase (i == 97);
					///
///<summary>
///PRIMARY 
///</summary>

					testcase (i == 98);
					///
///<summary>
///DEFERRED 
///</summary>

					testcase (i == 99);
					///
///<summary>
///DISTINCT 
///</summary>

					testcase (i == 100);
					///
///<summary>
///IS 
///</summary>

					testcase (i == 101);
					///
///<summary>
///DROP 
///</summary>

					testcase (i == 102);
					///
///<summary>
///FAIL 
///</summary>

					testcase (i == 103);
					///
///<summary>
///FROM 
///</summary>

					testcase (i == 104);
					///
///<summary>
///FULL 
///</summary>

					testcase (i == 105);
					///
///<summary>
///GLOB 
///</summary>

					testcase (i == 106);
					///
///<summary>
///BY 
///</summary>

					testcase (i == 107);
					///
///<summary>
///IF 
///</summary>

					testcase (i == 108);
					///
///<summary>
///ISNULL 
///</summary>

					testcase (i == 109);
					///
///<summary>
///ORDER 
///</summary>

					testcase (i == 110);
					///
///<summary>
///RESTRICT 
///</summary>

					testcase (i == 111);
					///
///<summary>
///OUTER 
///</summary>

					testcase (i == 112);
					///
///<summary>
///RIGHT 
///</summary>

					testcase (i == 113);
					///
///<summary>
///ROLLBACK 
///</summary>

					testcase (i == 114);
					///
///<summary>
///ROW 
///</summary>

					testcase (i == 115);
					///
///<summary>
///UNION 
///</summary>

					testcase (i == 116);
					///
///<summary>
///USING 
///</summary>

					testcase (i == 117);
					///
///<summary>
///VACUUM 
///</summary>

					testcase (i == 118);
					///
///<summary>
///VIEW 
///</summary>

					testcase (i == 119);
					///
///<summary>
///INITIALLY 
///</summary>

					testcase (i == 120);
					///
///<summary>
///ALL 
///</summary>

					return aCode [i];
				}
			}
			return TK_ID;
		}

		static int sqlite3KeywordCode (string z, int n)
		{
			return innerKeywordCode (z, 0, n);
		}

		public const int SQLITE_N_KEYWORD = 121;
	//#define SQLITE_N_KEYWORD 121
	}
}
